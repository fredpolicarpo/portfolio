/* tslint:disable no-unused-expression */

import * as chai from 'chai'
import { expect } from 'chai'
import chaiAsPromissed from 'chai-as-promised'
import moment from 'moment'
import { DepositSlip, InvalidAmountError, SlipGenerator } from './core/types'
import { buildSlipGenerator } from './generate-slip'
import { stub } from 'sinon'

chai.use(chaiAsPromissed)

describe('Deposit by slip', async () => {
    let slipGenerator: SlipGenerator

    it('should return the slip generated by the provider', async () => {
        const stubProvider = stub()
        const expectedSlip = {
            amount: 20,
            dueDate: moment().add(3, 'days').toDate(),
            barCode: '23793381286004050992321000063301683940000002000'
        }

        stubProvider.withArgs(20).returns(expectedSlip)
        slipGenerator = buildSlipGenerator(stubProvider)

        const slip: DepositSlip = await slipGenerator(20)

        expect(stubProvider.calledWith(20)).to.be.true
        expect(slip).to.be.deep.equal(expectedSlip)
    })

    it('should not call provider to generate slip if amount is less the 20', async () => {
        const stubProvider = stub()
        slipGenerator = buildSlipGenerator(stubProvider)

        try {
            await slipGenerator(10.99)
        } catch (err) {
            expect(stubProvider.called).to.be.false
        }
    })

    it('should throw InvalidAmountError if amount is less the 20', async () => {
        const stubProvider = stub()
        slipGenerator = buildSlipGenerator(stubProvider)

        await expect(slipGenerator(19.99)).to.be.rejectedWith(InvalidAmountError, 'The minimum amount allowed is 20, but given 19.99')
    })
})